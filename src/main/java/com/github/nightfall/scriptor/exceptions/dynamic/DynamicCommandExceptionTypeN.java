/*
 * Project Name: Scriptor
 *
 * Licensed under the PolyForm Shield License 1.0.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.nightfall.scriptor.exceptions.dynamic;

import com.github.nightfall.scriptor.interfaces.ImmutableStringReader;
import com.github.nightfall.scriptor.interfaces.Message;
import com.github.nightfall.scriptor.exceptions.CommandExceptionType;
import com.github.nightfall.scriptor.exceptions.CommandSyntaxException;

/**
 * A custom implementation of {@link CommandExceptionType} that creates {@link CommandSyntaxException} instances
 * dynamically based on a variable number of arguments.
 *
 * This class uses a functional approach, where the error message is generated by applying a {@link Function}
 * to an array of arguments.
 *
 * @author M4ximumpizza
 * @since 1.0
 */
public class DynamicCommandExceptionTypeN implements CommandExceptionType {

    /** The function used to generate the error message based on multiple arguments. */
    private final Function function;

    /**
     * Constructs a new {@code DynamicCommandExceptionTypeN} with the specified function for generating error messages.
     *
     * @param function the function that takes an array of objects and returns a {@link Message} for the exception
     */
    public DynamicCommandExceptionTypeN(final Function function) {
        this.function = function;
    }

    /**
     * Creates a {@link CommandSyntaxException} using the provided arguments.
     * The error message is dynamically generated by applying the {@link Function} to the array of arguments.
     *
     * @param a the first argument for generating the error message
     * @param args the additional arguments for generating the error message
     * @return a new {@link CommandSyntaxException} with the generated error message
     */
    public CommandSyntaxException create(final Object a, final Object... args) {
        return new CommandSyntaxException(this, function.apply(args));
    }

    /**
     * Creates a {@link CommandSyntaxException} with additional context from the reader.
     * The error message is dynamically generated by applying the {@link Function} to the array of arguments.
     *
     * @param reader the reader containing context information, such as the input string and cursor position
     * @param args the arguments for generating the error message
     * @return a new {@link CommandSyntaxException} with the generated error message and additional context
     */
    public CommandSyntaxException createWithContext(final ImmutableStringReader reader, final Object... args) {
        return new CommandSyntaxException(this, function.apply(args), reader.getString(), reader.getCursor());
    }

    /**
     * A functional interface used for generating error messages based on an array of arguments.
     */
    public interface Function {
        Message apply(Object[] args);
    }
}

